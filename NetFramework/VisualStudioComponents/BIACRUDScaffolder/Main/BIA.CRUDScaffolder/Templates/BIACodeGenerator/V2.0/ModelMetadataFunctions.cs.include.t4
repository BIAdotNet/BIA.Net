<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
string GetNullableTypeName(string typeName, string shortTypeName)
{
    // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
    // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
    Type primaryKeyType = null;
    try
    {
        primaryKeyType = Type.GetType(typeName);
    }
    catch
    {
    }
    if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
    {
        return shortTypeName + "?";
    }
    return shortTypeName;
}

string LoadingMode()
{
	if (GenerateListAjax) { 
		return "BIA.Net.DataTable.LoadingType.Ajax";
	}
	else if (GenerateListFullAjax) { 
		return "BIA.Net.DataTable.LoadingType.FullAjax";
	} 
	else { 
		return "BIA.Net.DataTable.LoadingType.Standard";
	}
}

bool IsGuid(string typeName) {
    return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
}

// Gets the related entity information for an association property where there is an associated foreign key property.
// Note: ModelMetadata.RelatedEntities contains only the related entities associated through a foreign key property.
RelatedModelMetadata GetRelatedModelMetadata(PropertyMetadata property){
	return property.RelatedModel;
}

// An association, e.g. Category, will have a value expression of Category.Title
string GetValueExpression(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
    return propertyModel != null ? propertyModel.AssociationPropertyName + "." + propertyModel.DisplayPropertyName : property.PropertyName;
}
// An association, e.g. Category, will have a value expression of Category.Title
string GetSafeValueExpression(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
    return propertyModel != null ? propertyModel.AssociationPropertyName + "?." + propertyModel.DisplayPropertyName : property.PropertyName;
}

string GetDisplayPropertyName(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
    return propertyModel != null ?  "." + propertyModel.DisplayPropertyName : "";
}


IDictionary<string, RelatedModelMetadata> relatedProperties = null;
RelatedModelMetadata GetKeyRelatedModelMetadata(PropertyMetadata property){
	RelatedModelMetadata propertyModel;

	if (relatedProperties == null)
	{
		List<RelatedModelMetadata> allRelatedProperties = ModelMetadata.Properties.Where(p => p.RelatedModel != null).Select(p => p.RelatedModel).ToList();

		if(allRelatedProperties != null)
		{
			relatedProperties = allRelatedProperties.ToDictionary(item => item.ForeignKeyPropertyNames[0]);
		}
		else
		{
			relatedProperties = new Dictionary<string, RelatedModelMetadata>();
		}
	}
    relatedProperties.TryGetValue(property.PropertyName, out propertyModel);

    return propertyModel;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetKeyRelatedModelMetadata(property);
    return propertyModel != null ? propertyModel.AssociationPropertyName : property.PropertyName;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetEntitySetName(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetKeyRelatedModelMetadata(property);
    return propertyModel != null ? propertyModel.EntitySetName : property.TypeName;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
Microsoft.AspNet.Scaffolding.Core.Metadata.AssociationDirection GetAssociationDirection(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetKeyRelatedModelMetadata(property);
	if (propertyModel != null)
	{
		PropertyMetadata relatedProperty =  ModelMetadata.Properties.Where(p => p.PropertyName == propertyModel.AssociationPropertyName).SingleOrDefault();
		if (relatedProperty != null) return relatedProperty.AssociationDirection;
	}
	return Microsoft.AspNet.Scaffolding.Core.Metadata.AssociationDirection.None;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName() {
    return (ModelMetadata.PrimaryKeys != null && ModelMetadata.PrimaryKeys.Count() == 1) ? ModelMetadata.PrimaryKeys[0].PropertyName : null;
}

bool IsPropertyGuid(PropertyMetadata property) {
    return String.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
}

string SafeFormId(string formName,bool inCsharp) {
	var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
	var unsafeIdInCsharp = "\"" + formName + "\" + Model." + ModelMetadata.PrimaryKeys[0].PropertyName;
	var unsafeIdOutCsharp = formName + "@" + "(Model." + ModelMetadata.PrimaryKeys[0].PropertyName + ")";
	if (primaryKeyShortTypeName == "int")
	{
		if (inCsharp)
		{
			return  unsafeIdInCsharp;
		}
		else
		{
			return  unsafeIdOutCsharp;
		}
	}
	else
	{
		if (inCsharp)
		{
			return "Html.SafeStringForId(" + unsafeIdInCsharp + ")";
		}
		else
		{
			return "@Html.SafeStringForId(" + unsafeIdInCsharp + ")";
		}
	}
}

string parameters = "";
string argParameters = "";
string docParameters = "";
string testParameters = "";
string safeLinqFilterParam = "";
string linqFilter = "";

void PrepareFilterParameter()
{
	if (GenerateFilter) { 
		foreach (PropertyMetadata property in ModelMetadata.Properties) {
			if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
			// We do not want to show any association properties for which there is
				// no associated foreign key.
				if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
					continue;
				}

				if (!string.IsNullOrEmpty(parameters) )
				{  
					parameters += ", "; 
					argParameters += ", "; 
					testParameters += " || ";
				}
				string type = "string";
				if (!property.IsAssociation) { type = property.ShortTypeName.Replace("System.",""); }
				parameters += "ICollection<" + type + "> filter" + property.PropertyName;
				argParameters += "filter" + property.PropertyName;
				testParameters += "filter" + property.PropertyName + " != null";
				docParameters += "\r\n        /// <param name=\"filter" + property.PropertyName  + "\">" + property.PropertyName + " selected in filter</param>";


				var linqSelect = "";
				if (property.IsAssociation && (property.AssociationDirection  == Microsoft.AspNet.Scaffolding.Core.Metadata.AssociationDirection.OneToMany||property.AssociationDirection  == Microsoft.AspNet.Scaffolding.Core.Metadata.AssociationDirection.ManyToMany)){
					var relatedProperty = GetRelatedModelMetadata(property);
					var lowerPropertyName = property.PropertyName.Substring(0, length:1).ToLowerInvariant() + property.PropertyName.Substring(1);
        			linqSelect = "entity." + property.PropertyName + ".Any(" + lowerPropertyName + " => filter" + property.PropertyName + ".Contains(" + lowerPropertyName + "." + relatedProperty.DisplayPropertyName + "))";
                }
				else
                {
					if (property.IsAssociation){
						RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
						linqSelect = "filter" + property.PropertyName + ".Contains((entity." + propertyModel.AssociationPropertyName + " == null) ? string.Empty : entity." + propertyModel.AssociationPropertyName + "." + propertyModel.DisplayPropertyName + ")";
                    }
					else{
						linqSelect = "filter" + property.PropertyName + ".Contains(entity." + GetValueExpression(property) + ")";
                    }
                }

				if (!string.IsNullOrEmpty(linqFilter))
                {
					linqFilter += " &&\r\n";
					safeLinqFilterParam += "\r\n";
                }					
				safeLinqFilterParam += "                filter" + property.PropertyName  + " = filter" + property.PropertyName  + " ?? new List<" + type + ">();";
				linqFilter += "                    (!filter" + property.PropertyName  + ".Any() || " + linqSelect + ")";

			}
		}
	}
	else{
		parameters = "";
		docParameters = "";
		testParameters = "";
		safeLinqFilterParam = "";
		linqFilter = "";
		argParameters = "";
    }
}

#>