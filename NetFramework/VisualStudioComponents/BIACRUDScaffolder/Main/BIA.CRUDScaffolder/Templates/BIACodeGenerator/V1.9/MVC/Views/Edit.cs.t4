<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
<#@ parameter type="System.Boolean" name="IconifiedInput" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{<#if (TranslateType) 
{#>
    ViewBag.Title = @TextResources.<#= ViewName#> + " " + @Html.Translate("<#= ViewDataTypeShortName #>");
<#}
else
{#>
    ViewBag.Title = @TextResources.<#= ViewName#> + "<#= ViewDataTypeShortName #>";
<#}
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<h2>@TextResources.<#= ViewName#> <#if (TranslateType){#>@Html.Translate("<#= ViewDataTypeShortName #>")<#}else{#><#= ViewDataTypeShortName #><#}#></h2>

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@TextResources.<#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
    string formName = ControllerRootName + ViewName + "Form";

#>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = <#=SafeFormId(formName,true)#>, @class = "PreventDuplicateRequest" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
<# 
    if (isControlHtmlAttributesSupported) {
#>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#        
    } else {
#>
        @Html.ValidationSummary(true)
<#      
    }
#>
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAssociation) {
        if (property.IsPrimaryKey) {
#>
        @Html.HiddenFor(model => model.<#= property.PropertyName #>)

<#
        } else if (!property.IsReadOnly) {
#>
        <div class="form-group">
<#
        if (property.IsForeignKey) {
#>
            @Html.<#if (TranslateFields){#>T_<#}#>LabelFor(model => model.<#= GetAssociationName(property) #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
        } else {
#>
            @Html.<#if (TranslateFields){#>T_<#}#>LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
        }
#>
            <div class="col-md-10">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<#
            if (GetAssociationDirection(property) == Microsoft.AspNet.Scaffolding.Core.Metadata.AssociationDirection.ManyToOne )
            {
                if (isControlHtmlAttributesSupported) {
#>
                @Html.DropDownListFor(model => model.<#= property.PropertyName #>, (IEnumerable<SelectListItem>)ViewBag.<#= GetEntitySetName(property) #>Id, "-----------------------------", htmlAttributes: new { @class = "form-control" })<# if(IconifiedInput) { #>.ToIconified()<# } #>

<#
                } else {
#>
                @Html.DropDownListFor(model => model.<#= property.PropertyName #>", String.Empty)<# if(IconifiedInput) { #>.ToIconified()<# } #>

<#
                }
            }
            else
            {
                if (isControlHtmlAttributesSupported) {
#>
                @Html.ListBoxFor(model => model.<#= property.PropertyName #>, (IEnumerable<SelectListItem>)ViewBag.<#= GetEntitySetName(property) #>Ids, htmlAttributes: new { @class = "form-control" })<# if(IconifiedInput) { #>.ToIconified()<# } #>

<#
                } else {
#>
                @Html.ListBoxFor(model => model.<#= property.PropertyName #>", String.Empty)<# if(IconifiedInput) { #>.ToIconified()<# } #>

<#
                }
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
                <div class="checkbox">
<#
                PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
                if (property.ShortTypeName.IndexOf("System.DateTime")==0)
                {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control calendarPicker" } })<# if(IconifiedInput) { #>.ToIconified()<# } #>

<#
                }
                else
                {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })<# if(IconifiedInput) { #>.ToIconified()<# } #>

<#
                }
            } 
        } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)<# if(IconifiedInput) { #>.ToIconified()<# } #>

<#
        }
        if (isControlHtmlAttributesSupported) {
            if (property.IsForeignKey) 
            {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, @TextResources.PleaseSelect + Html.DisplayNameFor(m => m.<#= GetAssociationName(property)#> ) + ".", new { @class = "text-danger" })
<# 
            }
            else
            {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<# 
            }
      
        } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
                </div>
<#
        }
#>
            </div>
        </div> 
<# //end form-group div #>

<#
        }
    }
}
#>
    </div>
}

@section Buttons {
    <div class="btn-action-container">
        <div class="btn-action">
            <button type="button" onclick="location.href='@Url.Action("Index")'" class="btn btn-2">@TextResources.BackToList</button>
        </div>
        <div class="btn-action">
            <button onclick="$('#<#=SafeFormId(formName,false)#>').submit();" class="btn btn-2">@TextResources.Save</button>
        </div>
    </div>
}

<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="../../ModelMetadataFunctions.cs.include.t4" #>
