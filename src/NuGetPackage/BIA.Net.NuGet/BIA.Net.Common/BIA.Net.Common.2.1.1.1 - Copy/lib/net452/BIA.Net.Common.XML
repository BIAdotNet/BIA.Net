<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BIA.Net.Common</name>
    </assembly>
    <members>
        <member name="M:BIA.Net.Common.ADLanguageHelper.GetADLanguageOrDefault(System.String)">
            <summary>
            Retrurn the language to use in application for the user and default en-US
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:BIA.Net.Common.ADLanguageHelper.GetADLanguage(System.String)">
            <summary>
            Retrurn the language to use in application for the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="F:BIA.Net.Common.BIAConstants.RoleInternal">
            <summary>
            The role Internal user (other digital manufacturing app pool) of the application
            </summary>
        </member>
        <member name="F:BIA.Net.Common.BIAConstants.RoleUser">
            <summary>
            The role User of the application
            </summary>
        </member>
        <member name="F:BIA.Net.Common.BIAConstants.ThemeDefault">
            <summary>
            The theme by default
            </summary>
        </member>
        <member name="T:BIA.Net.Common.BIAConstants.Theme">
            <summary>
            Themes for design
            </summary>
        </member>
        <member name="F:BIA.Net.Common.BIAConstants.Theme.Light">
            <summary>
            Theme Light
            </summary>
        </member>
        <member name="F:BIA.Net.Common.BIAConstants.Theme.Dark">
            <summary>
            Theme Dark
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIAConstants.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:BIA.Net.Common.Configuration.AuthenticationElement.ParametersElement.ADRolesMode">
            <summary>
            Return the mode to use to determine if user have a role with tag ADRole
            </summary>
        </member>
        <member name="M:BIA.Net.Common.Configuration.LanguageElement.GetApplicationLanguages">
            <summary>
            Get all application language.
            </summary>
            <returns>The list of language info.</returns>
        </member>
        <member name="T:BIA.Net.Common.Helpers.BIAUnityContentCreator">
            <summary>
            Memorize the content constructors
            </summary>
        </member>
        <member name="F:BIA.Net.Common.Helpers.BIAUnityContentCreator.ContentsCreator">
            <summary>
            all constructors of the contents
            </summary>
        </member>
        <member name="T:BIA.Net.Common.Helpers.BIAUnityContainer`1">
            <summary>
            Class to use as containner of a class when you cannot directly use the class, the constructor are referenced in BIAContentCreator
            </summary>
            <typeparam name="Content"></typeparam>
        </member>
        <member name="F:BIA.Net.Common.Helpers.BIAUnityContainer`1.content">
            <summary>
            Content of this container class
            </summary>
        </member>
        <member name="M:BIA.Net.Common.Helpers.BIAUnityContainer`1.#ctor">
            <summary>
            Create the 
            </summary>
        </member>
        <member name="T:BIA.Net.Common.Helpers.OpenXmlExcelHelper">
            <summary>
            OpenXml Excel Helper
            </summary>
        </member>
        <member name="M:BIA.Net.Common.Helpers.OpenXmlExcelHelper.GetCell(System.String)">
            <summary>
            return a new instance of the CellValue (CellValues.String)
            </summary>
            <param name="text">text value</param>
            <returns>excel cell</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.OpenXmlExcelHelper.GetCell(System.String,DocumentFormat.OpenXml.Packaging.SharedStringTablePart)">
            <summary>
            return a new instance of the CellValue (CellValues.String)
            </summary>
            <param name="text">text value</param>
            <param name="shareStringPart">string table shared to storage text</param>
            <returns>excel cell</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.OpenXmlExcelHelper.InsertSharedStringItem(System.String,DocumentFormat.OpenXml.Packaging.SharedStringTablePart)">
            <summary>
            Given text and a SharedStringTablePart, creates a SharedStringItem with the specified text
            and inserts it into the SharedStringTablePart. If the item already exists, returns its index.
            </summary>
            <param name="text">Test to insert in the string table shared</param>
            <param name="shareStringPart">string table shared to sotrage the text</param>
            <returns>Return the index id from the table where the text is storaged</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.OpenXmlExcelHelper.InsertWorksheet(DocumentFormat.OpenXml.Packaging.WorkbookPart,System.String)">
            <summary>
            Function to insert a sheet in the workbook
            </summary>
            <param name="workbookPart">current workbook</param>
            <param name="name">Name of the sheet</param>
            <returns>Return the sheet created</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.OpenXmlExcelHelper.CreateWorkBook(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{DocumentFormat.OpenXml.Spreadsheet.Row}})">
            <summary>
            Creates the work book.
            </summary>
            <param name="listSheets">The rows.</param>
            <returns>File Byte Array</returns>
        </member>
        <member name="T:BIA.Net.Common.Helpers.SerializationHelper">
            <summary>
            Serialization Helper
            </summary>
        </member>
        <member name="M:BIA.Net.Common.Helpers.SerializationHelper.ConvertJsonToObject``1(System.String)">
            <summary>
            Reads a document stream in the JSON format and returns the deserialized object.
            </summary>
            <typeparam name="T">object type</typeparam>
            <param name="json">json</param>
            <returns>object</returns>
        </member>
        <member name="T:BIA.Net.Common.Helpers.BIAUnity">
            <summary>
            Configure unity in Model layer
            </summary>
        </member>
        <member name="P:BIA.Net.Common.Helpers.BIAUnity.RootContainer">
            <summary>
            Gets or sets the main container
            </summary>
        </member>
        <member name="P:BIA.Net.Common.Helpers.BIAUnity.IsMoq">
            <summary>
            Gets or sets a value indicating whether is moq
            </summary>
        </member>
        <member name="P:BIA.Net.Common.Helpers.BIAUnity.LifetimeManagerType">
            <summary>
            Gets or sets the LifetimeManager Type
            </summary>
        </member>
        <member name="M:BIA.Net.Common.Helpers.BIAUnity.Init(System.Type,System.Boolean)">
            <param name="lifetimeManagerType">The lifetime manager type</param>
            <param name="isMoq">Is moq</param>
        </member>
        <member name="M:BIA.Net.Common.Helpers.BIAUnity.RegisterType``2">
            <summary>Registers the type mappings with the Unity container.</summary>
            <typeparam name="TFrom">Type from</typeparam>
            <typeparam name="TTo">Type to</typeparam>
        </member>
        <member name="M:BIA.Net.Common.Helpers.BIAUnity.RegisterType(System.Type,System.Type)">
            <summary>Registers the type mappings with the Unity container.</summary>
            <param name="from">Type from</param>
            <param name="to">Type to</param>
        </member>
        <member name="M:BIA.Net.Common.Helpers.BIAUnity.RegisterType``1">
            <summary>Registers the type mappings with the Unity container.</summary>
            <typeparam name="T">Type from</typeparam>
        </member>
        <member name="M:BIA.Net.Common.Helpers.BIAUnity.RegisterType(System.Type)">
            <summary>Registers the type mappings with the Unity container.</summary>
            <param name="t">Type from</param>
        </member>
        <member name="M:BIA.Net.Common.Helpers.BIAUnity.Resolve``1">
            <summary>
            Resolve Unity
            </summary>
            <typeparam name="TFrom"></typeparam>
            <returns>The object resolve</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.BIAUnity.Resolve(System.Type)">
            <summary>
            Resolve Unity
            </summary>
            <param name="from"></param>
            <returns>The object resolve</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.BIAUnity.RegisterTypeContent``1(System.Func{System.Object})">
            <summary>Registers the type mappings with the Unity container.</summary>
            <typeparam name="Content">Type from as Content</typeparam>
        </member>
        <member name="M:BIA.Net.Common.Helpers.BIAUnity.ResolveContent``1">
            <summary>
            Resolve Unity for Content
            </summary>
            <param name="TContentFrom"></param>
            <returns>The object resolve</returns>
        </member>
        <member name="T:BIA.Net.Common.Helpers.StopWatchHelper">
            <summary>
            Wrapper for .NET Stopwatch class to provide an easy way to manipulate timer and counter for performance analysis purpose.
            </summary>
        </member>
        <member name="F:BIA.Net.Common.Helpers.StopWatchHelper.Counters">
            <summary>
            Store the list of current counters associated with their hashcode.
            </summary>
        </member>
        <member name="F:BIA.Net.Common.Helpers.StopWatchHelper.OrphanedCounters">
            <summary>
            Store a stack of available counters.
            </summary>
        </member>
        <member name="F:BIA.Net.Common.Helpers.StopWatchHelper.lastCleanTime">
            <summary>
            Store the datetime value of the last cleaning.
            </summary>
        </member>
        <member name="M:BIA.Net.Common.Helpers.StopWatchHelper.Start">
            <summary>
            Start a counter using a new one or a free existing one.
            </summary>
            <returns>Identifier to retrieve the counter.</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.StopWatchHelper.Start(System.Int32)">
            <summary>
            Resumes an existing counter. If the counter is already counting, nothing will happened.
            </summary>
            <exception cref="T:BIA.Net.Common.Helpers.CounterNotFoundException">Thrown if no existing counter with the provided identifier.</exception>
            <exception cref="T:BIA.Net.Common.Helpers.NullCounterException">Thrown if counter linked to identifier is null.</exception>
            <param name="counterId">Identifier of the counter to resume.</param>
        </member>
        <member name="M:BIA.Net.Common.Helpers.StopWatchHelper.Stop(System.Int32)">
            <summary>
            Stops the counter and returns the elapsed time in millisecond since started.
            </summary>
            <param name="counterId">Counter Id</param>
            <exception cref="T:BIA.Net.Common.Helpers.CounterNotFoundException">Thrown if no existing counter with the provided identifier.</exception>
            <exception cref="T:BIA.Net.Common.Helpers.NullCounterException">Thrown if counter linked to identifier is null.</exception>
            <returns>Elapsed time in milliseconds</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.StopWatchHelper.CleanCounters">
            <summary>
            Cleaning process of existing counters. Once per hour, clean any counter started for more than one hour,
            that must be an error from the developper, forgetting calling the Stop method on it.
            </summary>
        </member>
        <member name="T:BIA.Net.Common.Helpers.CounterNotFoundException">
            <summary>
            Specific class if expected counter is not found.
            </summary>
        </member>
        <member name="M:BIA.Net.Common.Helpers.CounterNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BIA.Net.Common.Helpers.CounterNotFoundException"/> class with a specified error message..
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:BIA.Net.Common.Helpers.NullCounterException">
            <summary>
            Specific class if expected counter is null.
            </summary>
        </member>
        <member name="M:BIA.Net.Common.Helpers.NullCounterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BIA.Net.Common.Helpers.NullCounterException"/> class with a specified error message..
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:BIA.Net.Common.Helpers.TypeHelper">
            <summary>
            Helper class for type.
            </summary>
        </member>
        <member name="M:BIA.Net.Common.Helpers.TypeHelper.NameOf``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the detailed name of a property or method.
            </summary>
            <remarks>If c#6 is available, use the nameof operator instead.</remarks>
            <typeparam name="T">Type of the class.</typeparam>
            <param name="expression">Member expression to select the property or method.</param>
            <returns>The string equivalent of the expression.</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.TypeHelper.NameOf``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
            Gets the name of a property or method.
            </summary>
            <remarks>If c#6 is available, use the nameof operator instead.</remarks>
            <typeparam name="T">Type of the class.</typeparam>
            <param name="expression">Member expression to select the property or method.</param>
            <param name="detailed">If true, the whole expression hierarchy to acces the field will be available.</param>
            <returns>The string equivalent of the expression.</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.TypeHelper.ExtractNamePart(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Extract the different part of the provided expression.
            </summary>
            <param name="expression">Expression body to handle.</param>
            <param name="detailed">If true, the whole expression hierarchy to acces the field will be available.</param>
            <returns>The different part of the provided expression.</returns>
        </member>
        <member name="T:BIA.Net.Common.Helpers.TypeHelper`1">
            <summary>
            Helper class for type.
            </summary>
            <typeparam name="TClass">Type managed by the helper class.</typeparam>
        </member>
        <member name="M:BIA.Net.Common.Helpers.TypeHelper`1.NameOf``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the detailed name of a property or method.
            </summary>
            <remarks>If c#6 is available, use the nameof operator instead.</remarks>
            <typeparam name="T">Type of the class.</typeparam>
            <param name="expression">Member expression to select the property or method.</param>
            <returns>The string equivalent of the expression.</returns>
        </member>
        <member name="M:BIA.Net.Common.Helpers.TypeHelper`1.NameOf``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Gets the name of a property or method.
            </summary>
            <remarks>If c#6 is available, use the nameof operator instead.</remarks>
            <typeparam name="T">Type of the class.</typeparam>
            <param name="expression">Member expression to select the property or method.</param>
            <param name="detailed">If true, the whole expression hierarchy to acces the field will be available.</param>
            <returns>The string equivalent of the expression.</returns>
        </member>
        <member name="T:BIA.Net.Common.Helpers.WindowsServiceHelper">
            <summary>
            WindowsService Helper
            </summary>
        </member>
        <member name="M:BIA.Net.Common.Helpers.WindowsServiceHelper.Start(System.String,System.Nullable{System.Int32})">
            <summary>
            Start the service
            </summary>
            <param name="serviceName">service name</param>
            <param name="timeoutMilliseconds">timeout Milliseconds</param>
        </member>
        <member name="M:BIA.Net.Common.Helpers.WindowsServiceHelper.Stop(System.String,System.Nullable{System.Int32})">
            <summary>
            Stop the service
            </summary>
            <param name="serviceName">service name</param>
            <param name="timeoutMilliseconds">timeout Milliseconds</param>
        </member>
        <member name="M:BIA.Net.Common.Helpers.WindowsServiceHelper.Restart(System.String,System.Nullable{System.Int32})">
            <summary>
            Restart the service
            </summary>
            <param name="serviceName">service name</param>
            <param name="timeoutMilliseconds">timeout Milliseconds</param>
        </member>
        <member name="M:BIA.Net.Common.Helpers.WindowsServiceHelper.GetStatus(System.String)">
            <summary>
            returns service status.
            </summary>
            <param name="serviceName">service name</param>
            <returns>service status</returns>
        </member>
        <member name="T:BIA.Net.Common.LanguageInfo">
            <summary>
            The language information.
            </summary>
        </member>
        <member name="F:BIA.Net.Common.LanguageInfo.AllLanguageInfos">
            <summary>
            The dictionnary of all languages available.
            </summary>
        </member>
        <member name="P:BIA.Net.Common.LanguageInfo.Code">
            <summary>
            Gets or sets the language code.
            </summary>
        </member>
        <member name="P:BIA.Net.Common.LanguageInfo.Name">
            <summary>
            Gets or sets the language name.
            </summary>
        </member>
        <member name="P:BIA.Net.Common.LanguageInfo.ShortName">
            <summary>
            Gets or sets the language short name.
            </summary>
        </member>
        <member name="T:BIA.Net.Common.CustomRollingFileAppender">
            <summary>
            Custom log4net.Appender.RollingFileAppender
            </summary>
        </member>
        <member name="P:BIA.Net.Common.CustomRollingFileAppender.LastDeleteOldFile">
            <summary>
            Gets or sets date of the last log file cleanup.
            </summary>
        </member>
        <member name="M:BIA.Net.Common.CustomRollingFileAppender.OpenFile(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:BIA.Net.Common.CustomRollingFileAppender.DeleteOldFile">
            <summary>
            Delete files that were changed more than N days ago. (N = this.MaxSizeRollBackups)
            </summary>
        </member>
        <member name="T:BIA.Net.Common.TraceManager">
            <summary>
            Class to for trace management.
            </summary>
        </member>
        <member name="F:BIA.Net.Common.TraceManager.Log">
            <summary>
            Store the log4net logger.
            </summary>
        </member>
        <member name="F:BIA.Net.Common.TraceManager.lastElapsedTime">
            <summary>
            Last time measure for this thread.
            </summary>
        </member>
        <member name="F:BIA.Net.Common.TraceManager.lastTimerId">
            <summary>
            Last counter id used for this thread
            </summary>
        </member>
        <member name="T:BIA.Net.Common.TraceManager.TimeMeasureAction">
            <summary>
            Enum to list available action on time measure
            </summary>
        </member>
        <member name="F:BIA.Net.Common.TraceManager.TimeMeasureAction.DoNothing">
            <summary>
            Do nothing about time measure
            </summary>
        </member>
        <member name="F:BIA.Net.Common.TraceManager.TimeMeasureAction.Start">
            <summary>
            Start time measure
            </summary>
        </member>
        <member name="F:BIA.Net.Common.TraceManager.TimeMeasureAction.Stop">
            <summary>
            Stop time measure
            </summary>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Configure">
            <summary>
            Automatically configures the log system based on the application's configuration settings.
            </summary>
            <param name="pEventLog">Event logger</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Debug(System.String,System.String,System.String)">
            <summary>
            Log a message object with the Debug level.
            </summary>
            <param name="className">Name of the current class to use for log.</param>
            <param name="methodName">Name of the current method to use for log.</param>
            <param name="message">Message to use in log entry.</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Debug(System.String,System.Int32,System.String,System.String)">
            <summary>
            Log a message object with the Debug level (automaticaly set the class and methode.)
            </summary>
            <param name="message">message to log</param>
            <param name="linenumber">linenumber Automaticaly field</param>
            <param name="filepath">filepath Automaticaly field</param>
            <param name="memberName">memberName Automaticaly field</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Debug(System.String,System.String,System.String,BIA.Net.Common.TraceManager.TimeMeasureAction)">
            <summary>
            Log a message object with the Debug level. Before this, a time measure action will be done according to providing value.
            </summary>
            <param name="className">Name of the current class to use for log.</param>
            <param name="methodName">Name of the current method to use for log.</param>
            <param name="message">Message to use in log entry.</param>
            <param name="timeMeasureAction">Time measure action to proceed.</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Debug(System.String,System.String,System.String,System.Exception)">
            <summary>
            Log a message object with the Debug level including the stack trace of the System.Exception passed as a parameter.
            </summary>
            <param name="className">Name of the current class to use for log.</param>
            <param name="methodName">Name of the current method to use for log.</param>
            <param name="message">Message to use in log entry.</param>
            <param name="exception">Exception to use in log entry.</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Info(System.String,System.String,System.String)">
            <summary>
            Log a message object with the Info level.
            </summary>
            <param name="className">Name of the current class to use for log.</param>
            <param name="methodName">Name of the current method to use for log.</param>
            <param name="message">Message to use in log entry.</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Info(System.String,System.Int32,System.String,System.String)">
            <summary>
            Log a message object with the Info level(automaticaly set the class and methode.)
            </summary>
            <param name="message">message to log</param>
            <param name="linenumber">linenumber Automaticaly field</param>
            <param name="filepath">filepath Automaticaly field</param>
            <param name="memberName">memberName Automaticaly field</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Info(System.String,System.String,System.String,System.Exception)">
            <summary>
            Log a message object with the Info level including the stack trace of the System.Exception passed as a parameter.
            </summary>
            <param name="className">Name of the current class to use for log.</param>
            <param name="methodName">Name of the current method to use for log.</param>
            <param name="message">Message to use in log entry.</param>
            <param name="exception">Exception to use in log entry.</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Warn(System.String,System.String,System.String)">
            <summary>
            Log a message object with the Warn level.
            </summary>
            <param name="className">Name of the current class to use for log.</param>
            <param name="methodName">Name of the current method to use for log.</param>
            <param name="message">Message to use in log entry.</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Warn(System.String,System.String,System.String,System.Exception)">
            <summary>
            Log a message object with the Warn level including the stack trace of the System.Exception passed as a parameter.
            </summary>
            <param name="className">Name of the current class to use for log.</param>
            <param name="methodName">Name of the current method to use for log.</param>
            <param name="message">Message to use in log entry.</param>
            <param name="exception">Exception to use in log entry.</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Warn(System.String,System.Int32,System.String,System.String)">
            <summary>
            Log a message object with the Warn level (automaticaly set the class and methode.)
            </summary>
            <param name="message">message to log</param>
            <param name="linenumber">linenumber Automaticaly field</param>
            <param name="filepath">filepath Automaticaly field</param>
            <param name="memberName">memberName Automaticaly field</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Warn(System.String,System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Log a message object with the Warn level including the stack trace of the System.Exception passed as a parameter(automaticaly set the class and methode.)
            </summary>
            <param name="message">message to log</param>
            <param name="exception">Exception to use in log entry.</param>
            <param name="linenumber">linenumber Automaticaly field</param>
            <param name="filepath">filepath Automaticaly field</param>
            <param name="memberName">memberName Automaticaly field</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Error(System.String,System.String,System.String)">
            <summary>
            Log a message object with the Error level.
            </summary>
            <param name="className">Name of the current class to use for log.</param>
            <param name="methodName">Name of the current method to use for log.</param>
            <param name="message">Message to use in log entry.</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Error(System.String,System.String,System.String,System.Exception)">
            <summary>
            Log a message object with the Error level including the stack trace of the System.Exception passed as a parameter.
            </summary>
            <param name="className">Name of the current class to use for log.</param>
            <param name="methodName">Name of the current method to use for log.</param>
            <param name="message">Message to use in log entry.</param>
            <param name="exception">Exception to use in log entry.</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Error(System.String,System.Int32,System.String,System.String)">
            <summary>
            Log a message object with the Error level (automaticaly set the class and methode.)
            </summary>
            <param name="message">message to log</param>
            <param name="linenumber">linenumber Automaticaly field</param>
            <param name="filepath">filepath Automaticaly field</param>
            <param name="memberName">memberName Automaticaly field</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.Error(System.String,System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Log a message object with the Error level including the stack trace of the System.Exception passed as a parameter(automaticaly set the class and methode.)
            </summary>
            <param name="message">message to log</param>
            <param name="exception">Exception to use in log entry.</param>
            <param name="linenumber">linenumber Automaticaly field</param>
            <param name="filepath">filepath Automaticaly field</param>
            <param name="memberName">memberName Automaticaly field</param>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.StartTimeMeasure">
            <summary>
            Starts the stopwatch
            </summary>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.StopTimeMeasure">
            <summary>
            Stops the the stopwatch
            </summary>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.FormatMessage(System.String,System.String,System.String)">
            <summary>
            Concatenates the string parameters.
            </summary>
            <param name="className">The class name to use.</param>
            <param name="methodName">The method name to use.</param>
            <param name="message">The message to use.</param>
            <returns>The concatenation of the provided values.</returns>
        </member>
        <member name="M:BIA.Net.Common.TraceManager.ResetLastElapsedTime">
            <summary>
            Reset the last elapsed time.
            </summary>
        </member>
        <member name="T:BIA.Net.Common.BIASettingsReader">
            <summary>
            AppSettings Reader
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIASettingsReader.DialogLayouts">
            <summary>
            
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIASettingsReader.BIANetSection">
            <summary>
            Get the BIANe Section
            </summary>
        </member>
        <member name="M:BIA.Net.Common.BIASettingsReader.GetDialogLayout(System.String)">
            <summary>
            Gets AD Groups As Application Users
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIASettingsReader.UrlIndexDivision">
            <summary>
            Gets AD Simulated User
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIASettingsReader.DisableUserGroupCheck">
            <summary>
            Gets AD Simulated User
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIASettingsReader.UrlStatic">
            <summary>
            Gets Static URL for resources.
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIASettingsReader.CompanyName">
            <summary>
            Gets the company name.
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIASettingsReader.DivisionName">
            <summary>
            Gets the division name.
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIASettingsReader.DivisionShortName">
            <summary>
            Gets the division name.
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIASettingsReader.ProjectTitle">
            <summary>
            Gets the project title.
            </summary>
        </member>
        <member name="P:BIA.Net.Common.BIASettingsReader.ProjectShortName">
            <summary>
            Gets the project short name.
            </summary>
        </member>
    </members>
</doc>
